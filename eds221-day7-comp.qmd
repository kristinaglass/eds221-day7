---
title: "EDS221-day7
format: html
editor: visual
---

## 

```{r}
library(tidyverse)
library(palmerpenguins)
```

## Data Wrangling Refresher

1.  starting from penguins, write a single piped sequence in which you

    1.  only include penguins at dream and bisco islands

    2.  remove the year and sex variables

    3.  add a new colum body_mass_kg with penguin mass converted from g to kg

    4.  rename the siland variable to location

    ```{r}
    dream_biscoe <- penguins %>% 
      filter(island %in% c("Dream", "Biscoe")) %>% 
      select(-year, -sex) %>% 
      mutate(body_mass_kg = body_mass_g / 1000) %>% 
      rename(location = island)
            
    ```

2.  Starting from penguins, write a single piped sequence to

    1.  limit to Adelie penguins

    2.  remove any observations where flipper_length_mm s NA (!is.na() or drop_na())

    3.  group the data by sex

    4.  greate a summary table that contains the mean sd and sample size of flipper lengths for male and female adelie penguins

```{r}
adelie <- penguins %>% filter(species == "Adelie") %>% 
 drop_na(flipper_length_mm, sex) %>% 
  group_by(sex) %>% 
  summarise(mean_flipper = mean(flipper_length_mm), sd_flipper = sd(flipper_length_mm), sample_size = n())
```

Counts by species and island and sex

```{r}
counts_penguins <- penguins %>% count(species, island, sex)
#count includes group_by, summarize, and n() to get counts of observations
```

```{r}
animals <- data.frame(
  stringsAsFactors = FALSE,
          location = c("lagoon", "bluff", "creek", "oaks", "bluff"),
           species = c("bobcat", "coyote", "fox", "squirrel", "bobcat"),
          maturity = c("adult", "juvenile", "adult", "juvenile", "adult")
)
```

```{r}
sites <- data.frame(
  stringsAsFactors = FALSE,
          location = c("beach", "lagoon", "bluff", "oaks"),
    full_site_name = c("Goleta Beach","UCSB Lagoon",
                       "Ellwood Mesa","Fremont Campground"),
      jurisdiction = c("SB City", "UCSB", "SB City", "USFS")
)
```

```{r}
full_join_example <- full_join(animals, sites)
```

```{r}
left_join_example <- left_join(animals, sites)
```

```{r}
inner_join_example <- inner_join(animals, sites)
```

1996-02-18T20:34-07:00

2002-12-05T02:41-07:00

## Date Times with Lubridate()

ymd: if date is in year-month-day

mdy: if date is in month-day-year

dmy: if date is in day-month-year

```{r}
my_date_1 <- lubridate::mdy("03-15-1998")

my_date_1
class(my_date_1)

my_date_2 <- lubridate::mdy("11/7/2003")
my_date_2
class(my_date_2)

my_date_3 <- lubridate::dmy("08-Jun-1974")

my_date_4 <- lubridate::ymd(20041003)
```

Can we break the lubridate parsing functions?

```{r}
my_date_5 <- lubridate::mdy("06-20-2001")
## will break if date structre is illogical. eg. abive is dmy
```

Adding times to our dates

```{r}
time_1 <- lubridate::ymd_hm("2020-08-12 11:18")
```

Parse June 2, 1982 at 4:00pm utc

```{r}
examle_date_1 <- mdy_hm("June 2, 1982 4:00PM")
examle_date_1
```

```{r}
with_tz(examle_date_1, "Pacific/Kanton")
```

```{r}
date_time_1 <- mdy_hm("July, 24, 1977 5:28am")
```

```{r}
with_tz(date_time_1, "Asia/Chungking")
```

```{r}
date_time_2 <- dmy_hm("28 january 1877 12:45pm")
```

```{r}
## this can be used to find current time
now <- with_tz(Sys.time(), "Europe/Belgrade")
```

```{r}
with_tz(date_time_2, "Antarctica/DumontDUrville")
```

```{r}
lubridate::day(now)
```

```{r}
lubridate::week(now)
```

```{r}
lubridate::second(now)
```

l

```{r}
lubridate::minute(now)
```

```{r}
lubridate::epiyear(now)
```

```{r}
lubridate::leap_year(now)
```

```{r}
urchin_counts <- data.frame(
  date = c("Oct 12, 2004", "October 18, 2007", "Feb 12, 2003", "February 14, 2008"),
  species = c("purple", "red", "red", "red"),
  size_mm = c(19, 24, 18, 11)
)
```

```{r}
urchin_mean_by_month <- urchin_counts %>% 
  mutate(date = lubridate::mdy(date)) %>% 
  mutate(month = lubridate::month(date)) %>% 
  group_by(month) %>% 
  summarise(mean_size = mean(size_mm))
```

## Strings with Stringr

use str_detect to detect a string pattern

```{r}
my_string <- "Teddy loves salmon and kibble and toys."
```

```{r}
str_detect(my_string, pattern = "kibble")
```

```{r}
str_detect(my_string, pattern = "hot weather")
```

```{r}
my_string_2 <- c("burrito", "fish taco", "Taco salad", "super burritio")
```

```{r}
str_detect(my_string_2, pattern = "taco")
```

```{r}
names_skywalker <- starwars %>% 
  filter(str_detect(name, pattern ="Skywalker"))
```

```{r}
sky_to_fire <- starwars %>% 
  mutate(name_new = str_replace(name, pattern = "Sky", replacement = "Fire"))
```

str_trim to get rid of leading and trailing whitespace

str_squish to get rid of leading and trailing whitespace and excess interior white space

```{r}
my_string_3 <- "  Hi my name   is teddy !! !! !!    "
```

```{r}
str_trim(my_string_3)
```

```{r}
str_squish(my_string_3)
```

```{r}
str_to_lower(my_string_3)
```

```{r}
str_to_upper(my_string_3)
```

```{r}
str_to_title(my_string_3)
```

```{r}
str_to_sentence(my_string_3)
```

```{r}
starwars %>% 
  mutate(species_lower = str_to_lower(species))
```
